chap15-chall2
We can substitute an OP_SUBSTRACT by a combination of an OP_NEGATE and an OP_ADD.
this would reduce the bytecode instructions set but would make the generated bytecode
longer. (2 instructions instead of one for each -)
In term of performance after timing some execution we did not notice any improvement. Seems like
it does not optimize execution. We kept the changement there but commented it.

chap15-chall4
doing the negation on place seems to save a bit of time. OP_NOT could benefit of the same 
optimization. (notice it by observing time taken to compute fibonnacci.)

chap19-chall1:
Flexible array members for ObjString chars members added.

chap19-chall2:


chap19-chall3:
when trying to concatenate a string with another type we raise an error and exit as done
in python interpreter. Other language implicitely convert the other type to string and 
do the concatenation. We choose not to.

chap30-chall2:
Added small string optimization. I did a small benchamarking and noticed a huge difference 10x (0.008456 against 0.050852).
however the string lenght may also be another factor that will biased the difference in performance (The strings in not small_small 
string versions are much more longer than the one in the small string version which is the reason for for the optimization). 
But it does definitely improve the running time.
